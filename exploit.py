import swd

class GadgetFinder:

    def __init__(self,printer) -> None:
        self.regs = [f"R{i}" for i in range(13)]
        self.step_count = 0
        self.past_pcs = []
        self.dev = swd.Swd()
        self.cpu = swd.CortexM(self.dev)
        self.cpu.reset_halt()
        self.value_at_zero = self.cpu.get_reg("SP")
        self.value_at_four = self.cpu.get_reg("PC")
        self.printer = printer
        self.spinner_glob = self.printer.spinning_cursor()
        self.spinner_pc = self.printer.spinning_cursor()
        self.spinner_retrs = self.printer.spinning_cursor()



    def set_regs(self,values):
        for reg,value in zip(self.regs,values):
            self.cpu.set_reg(reg,value)

    def zero_registers(self):
        self.set_regs([0] * len(self.regs))

    def get_general_purpose_reg_values(self):
        return [self.cpu.get_reg_all()[x] for x in self.regs]

    def retry(self):
        self.cpu.reset_halt()
        
        self.printer.print_on_line(0,f"[x] Finding read gadget - {self.cpu.get_reg('PC')}")

        for i in range(self.step_count):
            self.cpu.step()
        
        self.past_pcs = []

    def find_read_gadget_addr(self):
        
        self.zero_registers()

        while not any(x == self.value_at_zero for x in self.get_general_purpose_reg_values()):
            
            self.printer.print_on_line(0,f"[{next(self.spinner_glob)}]Finding read gadget - {hex(self.cpu.get_reg('PC'))}")
            self.printer.print_on_line(1,f"\t[{next(self.spinner_pc)}] Finding candidate PC")

            pc = self.cpu.get_reg("PC")
            self.past_pcs.append(pc)

            self.zero_registers()
            self.cpu.step()
            self.step_count = self.step_count + 1

            if len(self.past_pcs) > 10 and all(x == self.past_pcs[-1] for x in self.past_pcs[-10:-1]):
                self.retry()

                   
        self.printer.print_on_line(1,"\t[] Finding candidate PC")
        return pc

    def find_target_reg(self):
        for x,y in self.cpu.get_reg_all().items():
            if x in self.regs and y == self.value_at_zero:
                return x

    def find_source_reg(self, pc, target):

        for reg in self.regs:
            self.set_regs([4] * len(self.regs))            
            self.cpu.set_reg(reg,0)
            self.cpu.set_reg("PC",pc)
           
            self.cpu.step()

            if self.cpu.get_reg(target) == self.value_at_zero:
                return reg
            

    def find_read_gadget(self):
        self.cpu.reset_halt()
        self.printer.print_on_line(0,f"[{next(self.spinner_glob)}]Finding read gadget - {hex(self.cpu.get_reg('PC'))}")

        while True:
            self.printer.print_on_line(1,"\t[] Finding candidate PC")
            candidate_pc = self.find_read_gadget_addr()

            self.printer.print_on_line(2,"\t[] Finding candidate target register")            
            candidate_target_reg = self.find_target_reg()

            self.printer.print_on_line(3,"\t[] Finding candidate source register")
            candidate_source_reg = self.find_source_reg(candidate_pc,candidate_target_reg)

            if candidate_source_reg:
                return (candidate_pc,candidate_target_reg,candidate_source_reg)

class MemReader:
    def __init__(self,gadget_loc,gadget_finder):
        self.gadget_address = gadget_loc[0]
        self.target_reg = gadget_loc[1]
        self.source_reg = gadget_loc[2]
        self.dev = gadget_finder.dev
        self.cpu = gadget_finder.cpu

    def read_mem(self,address):
        self.cpu.set_reg("PC",self.gadget_address)
        self.cpu.set_reg(self.source_reg,address)
        self.cpu.step()
        return self.cpu.get_reg(self.target_reg)