import swd
from datetime import datetime
from pprint import pprint

regs = [f"R{i}" for i in range(13)]
step_count = 0
past_pcs = []

dev = swd.Swd()
cpu = swd.CortexM(dev)
cpu.reset_halt()

value_at_zero = cpu.get_reg("SP")
value_at_four = cpu.get_reg("PC")

def set_regs(values):
    for reg,value in zip(regs,values):
        cpu.set_reg(reg,value)

def zero_registers():
    set_regs([0] * len(regs))

def get_general_purpose_reg_values():
    return [cpu.get_reg_all()[x] for x in regs]

def retry():
    global step_count
    global past_pcs

    cpu.reset_halt()
    print(f"Step count: {step_count}")
    
    for i in range(step_count):
        #pprint("Stepping")
        cpu.step()
    
    past_pcs = []

def find_read_gadget_addr():
    global step_count
    global past_pcs

    zero_registers()

    while not any(x == value_at_zero for x in get_general_purpose_reg_values()):
        pc = cpu.get_reg("PC")
        past_pcs.append(pc)

        zero_registers()
        #pprint("Stepping " + datetime.now().strftime("%M:%S") +f" {hex(pc)}")
        cpu.step()
        step_count = step_count + 1

        if len(past_pcs) > 10 and all(x == past_pcs[-1] for x in past_pcs[-10:-1]):
            print("Looping on the same pc for 10 times, retrying")
            retry()
    
    return pc

def find_target_reg():
    for x,y in cpu.get_reg_all().items():
        if x in regs and y == value_at_zero:
            return x

def find_source_reg(pc, target):
    for reg in regs:
        set_regs([4] * len(regs))
        cpu.set_reg(reg,0)
        cpu.set_reg("PC",pc)
        #print("BEFORE STEPPING")
        #pprint({x:hex(y) for x,y in cpu.get_reg_all().items()})

        cpu.step()

        #print("AFTER STEPPING")
        #pprint({x:hex(y) for x,y in cpu.get_reg_all().items()})

        if cpu.get_reg(target) == value_at_zero:
            return reg
        

def find_read_gadget():
    cpu.reset_halt()

    while True:
        print("Finding candidate PC")
        candidate_pc = find_read_gadget_addr()
        
        print("Finding candidate target")
        candidate_target_reg = find_target_reg()

        print("Finding candidate source")
        candidate_source_reg = find_source_reg(candidate_pc,candidate_target_reg)

        if candidate_source_reg:
            return (candidate_pc,candidate_target_reg,candidate_source_reg)

res = find_read_gadget()

print(f"Found read gadget at {hex(res[0])} as LD {res[1]} [{res[2]}]")
